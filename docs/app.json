[{"name":"app.R","content":"library(tidyverse)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(shiny)\nlibrary(glue)\nlibrary(WriteXLS)\n\n## source application files\n#source(\"global.R\", local = TRUE)\n\n\nui <- fluidPage(\n sidebarLayout(\n  sidebarPanel(\n   tags$h3(\"Project Gantt Chart\"),\n   tags$h4(\"Add or remove as many tasks as you like for a single project.\"),\n   tags$hr(),\n   textInput(inputId = \"projectName\", label = \"Project Name:\", placeholder = \"e.g., My Project\"),\n   textInput(inputId = \"inTaskName\", label = \"Task:\", placeholder = \"e.g., Extract and Link Data\"),\n   dateInput(inputId = \"inStartDate\", value = Sys.Date(), min = Sys.Date() - 365, label = \"Start Date:\"),\n   dateInput(inputId = \"inEndDate\", value = Sys.Date() + 10, min = Sys.Date() - 364, label = \"End Date:\"),\n   actionButton(inputId = \"btn\", label = \"Add Task\")\n  ),\n  mainPanel(\n   tags$h3(\"Task Table View\"),\n   tags$hr(),\n   DTOutput(outputId = \"tableTasks\"),\n   downloadButton(\"downloadExcel\", \"Download Table as Excel\"),\n   tags$h3(\"Gantt Chart\"),\n   tags$h4(\"Right-click the Gantt chart to copy or save as image.\"),\n   tags$hr(),\n   plotOutput(outputId = \"plotTasks\")\n  )\n )\n)\n\n\nserver <- function(input, output) {\n df <- reactiveValues(\n  data = data.frame(\n   Task = c(\"Task 1\", \"Task 2\"),\n   StartDate = as.Date(c(\"2023-10-10\", \"2023-10-30\")),\n   EndDate = as.Date(c(\"2023-11-30\", \"2023-12-15\"))\n  ) %>%\n   # Add an ID column - used later to remove row with certain ID\n   mutate(ID = row_number(), .before = Task) %>%\n   # Add a column with a custom Remove button\n   mutate(Remove = glue('<button id=\"custom_btn_{ID}\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{ID}\\')\">Remove<\/button>'))\n  \n )\n \n observeEvent(input$btn, {\n  task_name <- input$inTaskName\n  task_start_date <- input$inStartDate\n  task_end_date <- input$inEndDate\n  \n  if (!is.null(task_name) && !is.null(task_start_date) && !is.null(task_end_date)) {\n   # We also need a new row ID\n   new_id <- nrow(df$data) + 1\n   new_row <- data.frame(\n    # Row ID\n    ID = new_id,\n    Task = task_name,\n    StartDate = task_start_date,\n    EndDate = task_end_date,\n    # Remove button with a unique timestamp ID\n    Remove = glue('<button id=\"custom_btn\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{new_id}_', Sys.time(), '\\')\">Remove<\/button>'),\n    stringsAsFactors = FALSE\n   )\n   df$data <- rbind(df$data, new_row)\n   df$data <- df$data[order(df$data$ID), ]\n  }\n })\n \n # REMOVE A TASK\n observeEvent(input$button_id, {\n  # Extract the actual ID from the combined ID_timestamp\n  actual_id <- unlist(strsplit(input$button_id, \"_\"))[1]\n  \n  # Remove a row from the data.frame\n  df$data <- df$data[-c(as.integer(actual_id)), ]\n  \n  # Renumber the IDs\n  df$data$ID <- seq_len(nrow(df$data))\n  \n  # Sort the dataframe by StartDate\n  df$data <- df$data[order(df$data$StartDate), ]\n  \n  # Reset row names\n  rownames(df$data) <- NULL\n  \n  # Update the Remove buttons to reflect new IDs with a unique timestamp\n  df$data$Remove <- sapply(df$data$ID, function(i) {\n   glue('<button id=\"custom_btn_{i}\" onclick=\"Shiny.onInputChange(\\'button_id\\', \\'{i}_', Sys.time(), '\\')\">Remove<\/button>')\n  })\n })\n \n \n \n output$tableTasks <- renderDT({\n  datatable(data = df$data, escape = FALSE, caption = input$projectName)\n })\n \n output$plotTasks <- renderPlot({\n  ggplot(df$data, aes(x = StartDate, xend = EndDate, y = fct_rev(fct_inorder(Task)), yend = Task)) +\n   geom_segment(linewidth = 10, color = \"#0198f9\") +\n   labs(\n    title = input$projectName,\n    x = \"Duration\",\n    y = \"Task\"\n   ) +\n   theme_bw() +\n   theme(legend.position = \"none\") +\n   theme(\n    plot.title = element_text(size = 20),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14)\n   )\n })\n \n \n output$downloadExcel <- downloadHandler(\n  filename = function() {\n   paste(\"TaskData-\", Sys.Date(), \".xlsx\", sep=\"\")\n  },\n  content = function(file) {\n   write_xlsx(df$data, path = file)\n  }\n )\n \n}\n\n\nshinyApp(ui = ui, server = server)","type":"text"}]
